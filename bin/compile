#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

#######################
## 1. Node.js Setup  ##
#######################

#!/usr/bin/env bash

set -e            # fail fast
set -o pipefail   # don't ignore exit codes when piping output
# set -x          # enable debugging

# Configure directories
BUILD_DIR=$1
CACHE_DIR=$2
env_dir=$3

bp_dir=$(cd $(dirname $0); cd ..; pwd)

# Load some convenience functions like status(), echo(), and indent()
source $bp_dir/bin/common.sh

# Output npm debug info on error
trap cat_npm_debug_log ERR

# Look in package.json's engines.node field for a semver range
semver_range=$(cat $BUILD_DIR/package.json | $bp_dir/vendor/jq -r .engines.node)

# Resolve node version using semver.io
node_version=$(curl --silent --get --data-urlencode "range=${semver_range}" https://semver.io/node/resolve)

# Recommend using semver ranges in a safe manner
if [ "$semver_range" == "null" ]; then
  protip "Specify a node version in package.json"
  semver_range=""
elif [ "$semver_range" == "*" ]; then
  protip "Avoid using semver ranges like '*' in engines.node"
elif [ ${semver_range:0:1} == ">" ]; then
  protip "Avoid using semver ranges starting with '>' in engines.node"
fi

# Output info about requested range and resolved node version
if [ "$semver_range" == "" ]; then
  status "Defaulting to latest stable node: $node_version"
else
  status "Requested node range:  $semver_range"
  status "Resolved node version: $node_version"
fi

# Download node from Heroku's S3 mirror of nodejs.org/dist
status "Downloading and installing node"
node_url="http://s3pository.heroku.com/node/v$node_version/node-v$node_version-linux-x64.tar.gz"
curl $node_url -s -o - | tar xzf - -C $BUILD_DIR

# Move node (and npm) into ./vendor and make them executable
mkdir -p $BUILD_DIR/vendor
mv $BUILD_DIR/node-v$node_version-linux-x64 $BUILD_DIR/vendor/node
chmod +x $BUILD_DIR/vendor/node/bin/*
PATH=$BUILD_DIR/vendor/node/bin:$PATH

# Run subsequent node/npm commands from the build path
cd $BUILD_DIR

# If node_modules directory is checked into source control then
# rebuild any native deps. Otherwise, restore from the build cache.
if test -d $BUILD_DIR/node_modules; then
  status "Found existing node_modules directory; skipping cache"
  status "Rebuilding any native dependencies"
  npm rebuild 2>&1 | indent
elif test -d $CACHE_DIR/node/node_modules; then
  status "Restoring node_modules directory from cache"
  cp -r $CACHE_DIR/node/node_modules $BUILD_DIR/

  status "Pruning cached dependencies not specified in package.json"
  npm prune 2>&1 | indent

  if test -f $CACHE_DIR/node/.heroku/node-version && [ $(cat $CACHE_DIR/node/.heroku/node-version) != "$node_version" ]; then
    status "Node version changed since last build; rebuilding dependencies"
    npm rebuild 2>&1 | indent
  fi

fi

# Handle npm's new cert bug
# http://blog.npmjs.org/post/78085451721/npms-self-signed-certificate-is-no-more
if [ ! -f "$BUILD_DIR/.npmrc" ]; then
  status "Writing a custom .npmrc to circumvent npm bugs"
  echo "ca=" > "$BUILD_DIR/.npmrc"
fi

# Scope config var availability only to `npm install`
(
  if [ -d "$env_dir" ]; then
    status "Exporting config vars to environment"
    export_env_dir $env_dir
  fi

  status "Installing dependencies"
  # Make npm output to STDOUT instead of its default STDERR
  npm install --userconfig $BUILD_DIR/.npmrc --production 2>&1 | indent
)

# Persist goodies like node-version in the slug
mkdir -p $BUILD_DIR/.heroku

# Save resolved node version in the slug for later reference
echo $node_version > $BUILD_DIR/.heroku/node-version

# Purge node-related cached content, being careful not to purge the top-level
# cache, for the sake of heroku-buildpack-multi apps.
rm -rf $CACHE_DIR/node_modules # (for apps still on the older caching strategy)
rm -rf $CACHE_DIR/node
mkdir -p $CACHE_DIR/node

# If app has a node_modules directory, cache it.
if test -d $BUILD_DIR/node_modules; then
  status "Caching node_modules directory for future builds"
  cp -r $BUILD_DIR/node_modules $CACHE_DIR/node
fi

# Copy goodies to the cache
cp -r $BUILD_DIR/.heroku $CACHE_DIR/node

status "Cleaning up node-gyp and npm artifacts"
rm -rf "$BUILD_DIR/.node-gyp"
rm -rf "$BUILD_DIR/.npm"

# If Procfile is absent, try to create one using `npm start`
if [ ! -e $BUILD_DIR/Procfile ]; then
  npm_start=$(cat $BUILD_DIR/package.json | $bp_dir/vendor/jq -r .scripts.start)

  # If `scripts.start` is set in package.json, or a server.js file
  # is present in the app root, then create a default Procfile
  if [ "$npm_start" != "null" ] || [ -f $BUILD_DIR/server.js ]; then
    status "No Procfile found; Adding npm start to new Procfile"
    echo "web: npm start" > $BUILD_DIR/Procfile
  else
    status "Procfile not found and npm start script is undefined"
    protip "Create a Procfile or specify a start script in package.json"
  fi
fi

# Update the PATH
status "Building runtime environment"
mkdir -p $BUILD_DIR/.profile.d
echo "export PATH=\"\$HOME/vendor/node/bin:\$HOME/bin:\$HOME/node_modules/.bin:\$PATH\";" > $BUILD_DIR/.profile.d/nodejs.sh

#######################
## 2. Lineman Setup  ##
#######################

# build website with lineman
cd $BUILD_DIR

# install Bundler and Sass gems unless enableSass is false
if [ `$BUILD_DIR/node_modules/.bin/lineman config enableSass` != "false" ]
then
  echo "-----> Installing bundler and sass gems"
  export GEM_HOME="$BUILD_DIR/gems"
  export GEM_PATH=$GEM_HOME
  mkdir -p $GEM_HOME
  LANG="en_US.UTF-8" gem install bundler sass
  export PATH="/app/bin:$PATH:$GEM_PATH/bin"
fi


if [ -e Gemfile ]
then
  echo "-----> Bundling gems"
  bundle install
fi

echo "-----> Building static web assets with lineman"
mkdir -p dist/js
$BUILD_DIR/node_modules/.bin/lineman build --stack
echo "Web assets built" | indent

echo "-----> Removing development node_modules from slug"
npm prune --production

#######################
## 2.5. Backport of nodejs ##
#######################

exit 0

#######################
## 3. Apache Setup   ##
#######################
# install apache if needed. only if Procfile doesn't have a web process
echo "-----> Checking for Procfile and web process"
if [ -f Procfile ]; then
  echo "Procile exists...checking for web process" | indent
  if [ `grep -o '^web:' Procfile` ]; then
    echo "Found web process. No need to bundle Apache." | indent
    exit 0
  fi
fi


# config
APACHE_VERSION="2.2.19"
APACHE_PATH="apache"
PHP_VERSION="5.3.6"
PHP_PATH="php"

BIN_DIR=$(dirname $0)
LP_DIR=`cd $(dirname $0); cd ..; pwd`

cd $BUILD_DIR

# unpack cache
for DIR in $APACHE_PATH $PHP_PATH ; do
  rm -rf $DIR
  if [ -d $CACHE_DIR/$DIR ]; then
    cp -r $CACHE_DIR/$DIR $DIR
  fi
done



if [ ! -d $APACHE_PATH ]; then
  APACHE_URL="https://s3.amazonaws.com/php-lp/apache-$APACHE_VERSION.tar.gz"
  echo "-----> Bundling Apache v$APACHE_VERSION"
  curl --silent --max-time 60 --location $APACHE_URL | tar xz
fi


#copy in the httpd.conf from the buildpack
# copy the provided configuration and tack on any user configuration in config/httpd.conf
{ cat $BIN_DIR/../conf/httpd.conf; test -f $BUILD_DIR/config/httpd.conf && cat $BUILD_DIR/config/httpd.conf; } > $APACHE_PATH/conf/httpd.conf

# copy any apache modules from the build dir
test -d $BUILD_DIR/apache_modules && cp $BUILD_DIR/apache_modules/* $APACHE_PATH/modules/

cat >>boot.sh <<EOF
  export LD_LIBRARY_PATH=/app/apache/lib/
  if [ -n "$USERNAME" ] && [ -n "$PASSWORD" ]; then
    /app/apache/bin/htpasswd -bc /app/.passwords \$USERNAME \$PASSWORD
  fi
  sed -i 's/Listen 80/Listen '\$PORT'/' /app/apache/conf/httpd.conf
  echo "Launching apache"
  exec /app/apache/bin/httpd -X
EOF

chmod +x boot.sh



